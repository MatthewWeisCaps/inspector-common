/*
 * Copyright (c) 2020, Matthew Weis, Kansas State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.sireum.hamr.inspector.common

import art.{ArchitectureDescription, DataContent}

/**
 * Contains methods for providing all project-specific information the inspector needs to run for that particular project.
 */
trait InspectionBlueprint {

  /**
   * The project-specific ArchitectureDescription generated by HAMR based on the system's AADL model.
   *
   * USERS SHOULD SIMPLY RETURN THE PRE-GENERATED ArchitectureDescription OBJECT IN THEIR PROJECT FILE.
   *
   * @return The project-specific ArchitectureDescription
   */
  def ad(): ArchitectureDescription

  /**
   * A function to serialize DataContent into a String that can be deserialized with the deserializer() method.
   *
   * Although any serializer will work, the sergen tool can generate one automatically.
   *
   * See "regen.sh" in the inspector-common/scripts directory for a script that generates a universal serializer
   * for all DataContent types in a project.
   *
   * @return a function that converts DataContent to a deserializable String
   */
  def serializer(): DataContent => String

  /**
   * A function to deserialize a String back into its represented DataContent
   *
   * Although any deserializer will work, the sergen tool can generate one automatically.
   *
   * See "regen.sh" in the inspector-common/scripts directory for a script that generates a universal deserializer
   * for all DataContent types in a project.
   *
   * @return a function that converts a String back into its represented DataContent
   */
  def deserializer(): String => DataContent

}